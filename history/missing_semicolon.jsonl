{"round": 1, "prompt": "BUGGY FILE:\n// Copyright lowRISC contributors (OpenTitan project).\n// Licensed under the Apache License, Version 2.0, see LICENSE for details.\n// SPDX-License-Identifier: Apache-2.0\n//\n// Register Package auto-generated by `reggen` containing data structure\n\npackage pwrmgr_reg_pkg\n\n  // Param list\n  parameter int NumWkups = 6;\n  parameter int SYSRST_CTRL_AON_WKUP_REQ_IDX = 0;\n  parameter int ADC_CTRL_AON_WKUP_REQ_IDX = 1;\n  parameter int PINMUX_AON_PIN_WKUP_REQ_IDX = 2;\n  parameter int PINMUX_AON_USB_WKUP_REQ_IDX = 3;\n  parameter int AON_TIMER_AON_WKUP_REQ_IDX = 4;\n  parameter int SENSOR_CTRL_AON_WKUP_REQ_IDX = 5;\n  parameter int NumRstReqs = 2;\n  parameter int NumIntRstReqs = 2;\n  parameter int NumDebugRstReqs = 1;\n  parameter int NumRomInputs = 1;\n  parameter int ResetMainPwrIdx = 2;\n  parameter int ResetEscIdx = 3;\n  parameter int ResetNdmIdx = 4;\n  parameter int NumAlerts = 1;\n\n  // Address widths within the block\n  parameter int BlockAw = 7;\n\n  ////////////////////////////\n  // Typedefs for registers //\n  ////////////////////////////\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_intr_state_reg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_intr_enable_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_intr_test_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_alert_test_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n    } main_pd_n;\n    struct packed {\n      logic        q;\n    } usb_clk_en_active;\n    struct packed {\n      logic        q;\n    } usb_clk_en_lp;\n    struct packed {\n      logic        q;\n    } io_clk_en;\n    struct packed {\n      logic        q;\n    } core_clk_en;\n    struct packed {\n      logic        q;\n    } low_power_hint;\n  } pwrmgr_reg2hw_control_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_cfg_cdc_sync_reg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_wakeup_en_mreg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_reset_en_mreg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_wake_info_capture_dis_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n      logic        qe;\n    } abort;\n    struct packed {\n      logic        q;\n      logic        qe;\n    } fall_through;\n    struct packed {\n      logic [5:0]  q;\n      logic        qe;\n    } reasons;\n  } pwrmgr_reg2hw_wake_info_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n    } main_pd_glitch;\n    struct packed {\n      logic        q;\n    } esc_timeout;\n    struct packed {\n      logic        q;\n    } reg_intg_err;\n  } pwrmgr_reg2hw_fault_status_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_intr_state_reg_t;\n\n  typedef struct packed {\n    logic        d;\n  } pwrmgr_hw2reg_ctrl_cfg_regwen_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        d;\n      logic        de;\n    } low_power_hint;\n  } pwrmgr_hw2reg_control_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_cfg_cdc_sync_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_wake_status_mreg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_reset_status_mreg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_escalate_reset_status_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic [5:0]  d;\n    } reasons;\n    struct packed {\n      logic        d;\n    } fall_through;\n    struct packed {\n      logic        d;\n    } abort;\n  } pwrmgr_hw2reg_wake_info_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        d;\n      logic        de;\n    } reg_intg_err;\n    struct packed {\n      logic        d;\n      logic        de;\n    } esc_timeout;\n    struct packed {\n      logic        d;\n      logic        de;\n    } main_pd_glitch;\n  } pwrmgr_hw2reg_fault_status_reg_t;\n\n  // Register -> HW type\n  typedef struct packed {\n    pwrmgr_reg2hw_intr_state_reg_t intr_state; // [36:36]\n    pwrmgr_reg2hw_intr_enable_reg_t intr_enable; // [35:35]\n    pwrmgr_reg2hw_intr_test_reg_t intr_test; // [34:33]\n    pwrmgr_reg2hw_alert_test_reg_t alert_test; // [32:31]\n    pwrmgr_reg2hw_control_reg_t control; // [30:25]\n    pwrmgr_reg2hw_cfg_cdc_sync_reg_t cfg_cdc_sync; // [24:23]\n    pwrmgr_reg2hw_wakeup_en_mreg_t [5:0] wakeup_en; // [22:17]\n    pwrmgr_reg2hw_reset_en_mreg_t [1:0] reset_en; // [16:15]\n    pwrmgr_reg2hw_wake_info_capture_dis_reg_t wake_info_capture_dis; // [14:14]\n    pwrmgr_reg2hw_wake_info_reg_t wake_info; // [13:3]\n    pwrmgr_reg2hw_fault_status_reg_t fault_status; // [2:0]\n  } pwrmgr_reg2hw_t;\n\n  // HW -> register type\n  typedef struct packed {\n    pwrmgr_hw2reg_intr_state_reg_t intr_state; // [38:37]\n    pwrmgr_hw2reg_ctrl_cfg_regwen_reg_t ctrl_cfg_regwen; // [36:36]\n    pwrmgr_hw2reg_control_reg_t control; // [35:34]\n    pwrmgr_hw2reg_cfg_cdc_sync_reg_t cfg_cdc_sync; // [33:32]\n    pwrmgr_hw2reg_wake_status_mreg_t [5:0] wake_status; // [31:20]\n    pwrmgr_hw2reg_reset_status_mreg_t [1:0] reset_status; // [19:16]\n    pwrmgr_hw2reg_escalate_reset_status_reg_t escalate_reset_status; // [15:14]\n    pwrmgr_hw2reg_wake_info_reg_t wake_info; // [13:6]\n    pwrmgr_hw2reg_fault_status_reg_t fault_status; // [5:0]\n  } pwrmgr_hw2reg_t;\n\n  // Register offsets\n  parameter logic [BlockAw-1:0] PWRMGR_INTR_STATE_OFFSET = 7'h 0;\n  parameter logic [BlockAw-1:0] PWRMGR_INTR_ENABLE_OFFSET = 7'h 4;\n  parameter logic [BlockAw-1:0] PWRMGR_INTR_TEST_OFFSET = 7'h 8;\n  parameter logic [BlockAw-1:0] PWRMGR_ALERT_TEST_OFFSET = 7'h c;\n  parameter logic [BlockAw-1:0] PWRMGR_CTRL_CFG_REGWEN_OFFSET = 7'h 10;\n  parameter logic [BlockAw-1:0] PWRMGR_CONTROL_OFFSET = 7'h 14;\n  parameter logic [BlockAw-1:0] PWRMGR_CFG_CDC_SYNC_OFFSET = 7'h 18;\n  parameter logic [BlockAw-1:0] PWRMGR_WAKEUP_EN_REGWEN_OFFSET = 7'h 1c;\n  parameter logic [BlockAw-1:0] PWRMGR_WAKEUP_EN_OFFSET = 7'h 20;\n  parameter logic [BlockAw-1:0] PWRMGR_WAKE_STATUS_OFFSET = 7'h 24;\n  parameter logic [BlockAw-1:0] PWRMGR_RESET_EN_REGWEN_OFFSET = 7'h 28;\n  parameter logic [BlockAw-1:0] PWRMGR_RESET_EN_OFFSET = 7'h 2c;\n  parameter logic [BlockAw-1:0] PWRMGR_RESET_STATUS_OFFSET = 7'h 30;\n  parameter logic [BlockAw-1:0] PWRMGR_ESCALATE_RESET_STATUS_OFFSET = 7'h 34;\n  parameter logic [BlockAw-1:0] PWRMGR_WAKE_INFO_CAPTURE_DIS_OFFSET = 7'h 38;\n  parameter logic [BlockAw-1:0] PWRMGR_WAKE_INFO_OFFSET = 7'h 3c;\n  parameter logic [BlockAw-1:0] PWRMGR_FAULT_STATUS_OFFSET = 7'h 40;\n\n  // Reset values for hwext registers and their fields\n  parameter logic [0:0] PWRMGR_INTR_TEST_RESVAL = 1'h 0;\n  parameter logic [0:0] PWRMGR_INTR_TEST_WAKEUP_RESVAL = 1'h 0;\n  parameter logic [0:0] PWRMGR_ALERT_TEST_RESVAL = 1'h 0;\n  parameter logic [0:0] PWRMGR_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;\n  parameter logic [0:0] PWRMGR_CTRL_CFG_REGWEN_RESVAL = 1'h 1;\n  parameter logic [0:0] PWRMGR_CTRL_CFG_REGWEN_EN_RESVAL = 1'h 1;\n  parameter logic [7:0] PWRMGR_WAKE_INFO_RESVAL = 8'h 0;\n  parameter logic [5:0] PWRMGR_WAKE_INFO_REASONS_RESVAL = 6'h 0;\n  parameter logic [0:0] PWRMGR_WAKE_INFO_FALL_THROUGH_RESVAL = 1'h 0;\n  parameter logic [0:0] PWRMGR_WAKE_INFO_ABORT_RESVAL = 1'h 0;\n\n  // Register index\n  typedef enum int {\n    PWRMGR_INTR_STATE,\n    PWRMGR_INTR_ENABLE,\n    PWRMGR_INTR_TEST,\n    PWRMGR_ALERT_TEST,\n    PWRMGR_CTRL_CFG_REGWEN,\n    PWRMGR_CONTROL,\n    PWRMGR_CFG_CDC_SYNC,\n    PWRMGR_WAKEUP_EN_REGWEN,\n    PWRMGR_WAKEUP_EN,\n    PWRMGR_WAKE_STATUS,\n    PWRMGR_RESET_EN_REGWEN,\n    PWRMGR_RESET_EN,\n    PWRMGR_RESET_STATUS,\n    PWRMGR_ESCALATE_RESET_STATUS,\n    PWRMGR_WAKE_INFO_CAPTURE_DIS,\n    PWRMGR_WAKE_INFO,\n    PWRMGR_FAULT_STATUS\n  } pwrmgr_id_e;\n\n  // Register width information to check illegal writes\n  parameter logic [3:0] PWRMGR_PERMIT [17] = '{\n    4'b 0001, // index[ 0] PWRMGR_INTR_STATE\n    4'b 0001, // index[ 1] PWRMGR_INTR_ENABLE\n    4'b 0001, // index[ 2] PWRMGR_INTR_TEST\n    4'b 0001, // index[ 3] PWRMGR_ALERT_TEST\n    4'b 0001, // index[ 4] PWRMGR_CTRL_CFG_REGWEN\n    4'b 0011, // index[ 5] PWRMGR_CONTROL\n    4'b 0001, // index[ 6] PWRMGR_CFG_CDC_SYNC\n    4'b 0001, // index[ 7] PWRMGR_WAKEUP_EN_REGWEN\n    4'b 0001, // index[ 8] PWRMGR_WAKEUP_EN\n    4'b 0001, // index[ 9] PWRMGR_WAKE_STATUS\n    4'b 0001, // index[10] PWRMGR_RESET_EN_REGWEN\n    4'b 0001, // index[11] PWRMGR_RESET_EN\n    4'b 0001, // index[12] PWRMGR_RESET_STATUS\n    4'b 0001, // index[13] PWRMGR_ESCALATE_RESET_STATUS\n    4'b 0001, // index[14] PWRMGR_WAKE_INFO_CAPTURE_DIS\n    4'b 0001, // index[15] PWRMGR_WAKE_INFO\n    4'b 0001  // index[16] PWRMGR_FAULT_STATUS\n  };\n\nendpackage\n\n\nTRACE:\n%Error: tasks/task_00/bug.v:10:3: syntax error, unexpected parameter, expecting ';'\n   10 |   parameter int NumWkups = 6;\n      |   ^~~~~~~~~\n%Error: tasks/task_00/bug.v:280:1: syntax error, unexpected endpackage\n  280 | endpackage\n      | ^~~~~~~~~~\n%Error: Exiting due to 2 error(s)\n\n", "response": "// Copyright lowRISC contributors (OpenTitan project).\n// Licensed under the Apache License, Version 2.0, see LICENSE for details.\n// SPDX-License-Identifier: Apache-2.0\n//\n// Register Package auto-generated by `reggen` containing data structure\n\npackage pwrmgr_reg_pkg;\n\n  // Param list is now properly encapsulated.\n  localparam int NumWkups = 6;\n  localparam int SYSRST_CTRL_AON_WKUP_REQ_IDX = 0;\n  localparam int ADC_CTRL_AON_WKUP_REQ_IDX = 1;\n  localparam int PINMUX_AON_PIN_WKUP_REQ_IDX = 2;\n  localparam int PINMUX_AON_USB_WKUP_REQ_IDX = 3;\n  localparam int AON_TIMER_AON_WKUP_REQ_IDX = 4;\n  localparam int SENSOR_CTRL_AON_WKUP_REQ_IDX = 5;\n  localparam int NumRstReqs = 2;\n  localparam int NumIntRstReqs = 2;\n  localparam int NumDebugRstReqs = 1;\n  localparam int NumRomInputs = 1;\n  localparam int ResetMainPwrIdx = 2;\n  localparam int ResetEscIdx = 3;\n  localparam int ResetNdmIdx = 4;\n  localparam int NumAlerts = 1;\n\n  // Address widths within the block\n  localparam int BlockAw = 7;\n\n  ////////////////////////////\n  // Typedefs for registers //\n  ////////////////////////////\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_intr_state_reg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_intr_enable_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_intr_test_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_alert_test_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n    } main_pd_n;\n    struct packed {\n      logic        q;\n    } usb_clk_en_active;\n    struct packed {\n      logic        q;\n    } usb_clk_en_lp;\n    struct packed {\n      logic        q;\n    } io_clk_en;\n    struct packed {\n      logic        q;\n    } core_clk_en;\n    struct packed {\n      logic        q;\n    } low_power_hint;\n  } pwrmgr_reg2hw_control_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_cfg_cdc_sync_reg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_wakeup_en_mreg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_reset_en_mreg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_wake_info_capture_dis_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n      logic        qe;\n    } abort;\n    struct packed {\n      logic        q;\n      logic        qe;\n    } fall_through;\n    struct packed {\n      logic [5:0]  q;\n      logic        qe;\n    } reasons;\n  } pwrmgr_reg2hw_wake_info_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n    } main_pd_glitch;\n    struct packed {\n      logic        q;\n    } esc_timeout;\n    struct packed {\n      logic        q;\n    } reg_intg_err;\n  } pwrmgr_reg2hw_fault_status_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_intr_state_reg_t;\n\n  typedef struct packed {\n    logic        d;\n  } pwrmgr_hw2reg_ctrl_cfg_regwen_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        d;\n      logic        de;\n    } low_power_hint;\n  } pwrmgr_hw2reg_control_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_cfg_cdc_sync_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_wake_status_mreg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_reset_status_mreg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_escalate_reset_status_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic [5:0]  d;\n    } reasons;\n    struct packed {\n      logic        d;\n    } fall_through;\n    struct packed {\n      logic        d;\n    } abort;\n  } pwrmgr_hw2reg_wake_info_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        d;\n      logic        de;\n    } reg_intg_err;\n    struct packed {\n      logic        d;\n      logic        de;\n    } esc_timeout;\n    struct packed {\n      logic        d;\n      logic        de;\n    } main_pd_glitch;\n  } pwrmgr_hw2reg_fault_status_reg_t;\n\n  // Register -> HW type\n  typedef struct packed {\n    pwrmgr_reg2hw_intr_state_reg_t intr_state; // [36:36]\n    pwrmgr_reg2hw_intr_enable_reg_t intr_enable; // [35:35]\n    pwrmgr_reg2hw_intr_test_reg_t intr_test; // [34:33]\n    pwrmgr_reg2hw_alert_test_reg_t alert_test; // [32:31]\n    pwrmgr_reg2hw_control_reg_t control; // [30:25]\n    pwrmgr_reg2hw_cfg_cdc_sync_reg_t cfg_cdc_sync; // [24:23]\n    pwrmgr_reg2hw_wakeup_en_mreg_t [5:0] wakeup_en; // [22:17]\n    pwrmgr_reg2hw_reset_en_mreg_t [1:0] reset_en; // [16:15]\n    pwrmgr_reg2hw_wake_info_capture_dis_reg_t wake_info_capture_dis; // [14:14]\n    pwrmgr_reg2hw_wake_info_reg_t wake_info; // [13:3]\n    pwrmgr_reg2hw_fault_status_reg_t fault_status; // [2:0]\n  } pwrmgr_reg2hw_t;\n\n  // HW -> register type\n  typedef struct packed {\n    pwrmgr_hw2reg_intr_state_reg_t intr_state; // [38:37]\n    pwrmgr_hw2reg_ctrl_cfg_regwen_reg_t ctrl_cfg_regwen; // [36:36]\n    pwrmgr_hw2reg_control_reg_t control; // [35:34]\n    pwrmgr_hw2reg_cfg_cdc_sync_reg_t cfg_cdc_sync; // [33:32]\n    pwrmgr_hw2reg_wake_status_mreg_t [5:0] wake_status; // [31:20]\n    pwrmgr_hw2reg_reset_status_mreg_t [1:0] reset_status; // [19:16]\n    pwrmgr_hw2reg_escalate_reset_status_reg_t escalate_reset_status; // [15:14]\n    pwrmgr_hw2reg_wake_info_reg_t wake_info; // [13:6]\n    pwrmgr_hw2reg_fault_status_reg_t fault_status; // [5:0]\n  } pwrmgr_hw2reg_t;\n\n  // Register offsets\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_STATE_OFFSET = 7'h 0;\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_ENABLE_OFFSET = 7'h 4;\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_TEST_OFFSET = 7'h 8;\n  localparam logic [BlockAw-1:0] PWRMGR_ALERT_TEST_OFFSET = 7'h c;\n  localparam logic [BlockAw-1:0] PWRMGR_CTRL_CFG_REGWEN_OFFSET = 7'h 10;\n  localparam logic [BlockAw-1:0] PWRMGR_CONTROL_OFFSET = 7'h 14;\n  localparam logic [BlockAw-1:0] PWRMGR_CFG_CDC_SYNC_OFFSET = 7'h 18;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKEUP_EN_REGWEN_OFFSET = 7'h 1c;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKEUP_EN_OFFSET = 7'h 20;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_STATUS_OFFSET = 7'h 24;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_EN_REGWEN_OFFSET = 7'h 28;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_EN_OFFSET = 7'h 2c;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_STATUS_OFFSET = 7'h 30;\n  localparam logic [BlockAw-1:0] PWRMGR_ESCALATE_RESET_STATUS_OFFSET = 7'h 34;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_INFO_CAPTURE_DIS_OFFSET = 7'h 38;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_INFO_OFFSET = 7'h 3c;\n  localparam logic [BlockAw-1:0] PWRMGR_FAULT_STATUS_OFFSET = 7'h 40;\n\n  // Reset values for hwext registers and their fields\n  localparam logic [0:0] PWRMGR_INTR_TEST_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_INTR_TEST_WAKEUP_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_ALERT_TEST_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_CTRL_CFG_REGWEN_RESVAL = 1'h 1;\n  localparam logic [0:0] PWRMGR_CTRL_CFG_REGWEN_EN_RESVAL = 1'h 1;\n  localparam logic [7:0] PWRMGR_WAKE_INFO_RESVAL = 8'h 0;\n  localparam logic [5:0] PWRMGR_WAKE_INFO_REASONS_RESVAL = 6'h 0;\n  localparam logic [0:0] PWRMGR_WAKE_INFO_FALL_THROUGH_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_WAKE_INFO_ABORT_RESVAL = 1'h 0;\n\n  // Register index\n  typedef enum int {\n    PWRMGR_INTR_STATE,\n    PWRMGR_INTR_ENABLE,\n    PWRMGR_INTR_TEST,\n    PWRMGR_ALERT_TEST,\n    PWRMGR_CTRL_CFG_REGWEN,\n    PWRMGR_CONTROL,\n    PWRMGR_CFG_CDC_SYNC,\n    PWRMGR_WAKEUP_EN_REGWEN,\n    PWRMGR_WAKEUP_EN,\n    PWRMGR_WAKE_STATUS,\n    PWRMGR_RESET_EN_REGWEN,\n    PWRMGR_RESET_EN,\n    PWRMGR_RESET_STATUS,\n    PWRMGR_ESCALATE_RESET_STATUS,\n    PWRMGR_WAKE_INFO_CAPTURE_DIS,\n    PWRMGR_WAKE_INFO,\n    PWRMGR_FAULT_STATUS\n  } pwrmgr_id_e;\n\n  // Register width information to check illegal writes\n  localparam logic [3:0] PWRMGR_PERMIT [17] = '{\n    4'b 0001, // index[ 0] PWRMGR_INTR_STATE\n    4'b 0001, // index[ 1] PWRMGR_INTR_ENABLE\n    4'b 0001, // index[ 2] PWRMGR_INTR_TEST\n    4'b 0001, // index[ 3] PWRMGR_ALERT_TEST\n    4'b 0001, // index[ 4] PWRMGR_CTRL_CFG_REGWEN\n    4'b 0011, // index[ 5] PWRMGR_CONTROL\n    4'b 0001, // index[ 6] PWRMGR_CFG_CDC_SYNC\n    4'b 0001, // index[ 7] PWRMGR_WAKEUP_EN_REGWEN\n    4'b 0001, // index[ 8] PWRMGR_WAKEUP_EN\n    4'b 0001, // index[ 9] PWRMGR_WAKE_STATUS\n    4'b 0001, // index[10] PWRMGR_RESET_EN_REGWEN\n    4'b 0001, // index[11] PWRMGR_RESET_EN\n    4'b 0001, // index[12] PWRMGR_RESET_STATUS\n    4'b 0001, // index[13] PWRMGR_ESCALATE_RESET_STATUS\n    4'b 0001, // index[14] PWRMGR_WAKE_INFO_CAPTURE_DIS\n    4'b 0001, // index[15] PWRMGR_WAKE_INFO\n    4'b 0001  // index[16] PWRMGR_FAULT_STATUS\n  };\n\nendpackage\n", "success": false, "stderr": "%Warning-SYMRSVDWORD: /tmp/tmpiwj_y5y9.v:93:7: Symbol matches C++ common word: 'abort'\n   93 |     } abort;\n      |       ^~~~~\n                      ... For warning description see https://verilator.org/warn/SYMRSVDWORD?v=5.034\n                      ... Use \"/* verilator lint_off SYMRSVDWORD */\" and lint_on around source to disable this message.\n%Warning-SYMRSVDWORD: /tmp/tmpiwj_y5y9.v:161:7: Symbol matches C++ common word: 'abort'\n  161 |     } abort;\n      |       ^~~~~\n%Error: Exiting due to 2 warning(s)\n        ... See the manual at https://verilator.org/verilator_doc.html for more assistance.\n", "tool_used": true}
{"round": 2, "prompt": "BUGGY FILE:\n// Copyright lowRISC contributors (OpenTitan project).\n// Licensed under the Apache License, Version 2.0, see LICENSE for details.\n// SPDX-License-Identifier: Apache-2.0\n//\n// Register Package auto-generated by `reggen` containing data structure\n\npackage pwrmgr_reg_pkg;\n\n  // Param list is now properly encapsulated.\n  localparam int NumWkups = 6;\n  localparam int SYSRST_CTRL_AON_WKUP_REQ_IDX = 0;\n  localparam int ADC_CTRL_AON_WKUP_REQ_IDX = 1;\n  localparam int PINMUX_AON_PIN_WKUP_REQ_IDX = 2;\n  localparam int PINMUX_AON_USB_WKUP_REQ_IDX = 3;\n  localparam int AON_TIMER_AON_WKUP_REQ_IDX = 4;\n  localparam int SENSOR_CTRL_AON_WKUP_REQ_IDX = 5;\n  localparam int NumRstReqs = 2;\n  localparam int NumIntRstReqs = 2;\n  localparam int NumDebugRstReqs = 1;\n  localparam int NumRomInputs = 1;\n  localparam int ResetMainPwrIdx = 2;\n  localparam int ResetEscIdx = 3;\n  localparam int ResetNdmIdx = 4;\n  localparam int NumAlerts = 1;\n\n  // Address widths within the block\n  localparam int BlockAw = 7;\n\n  ////////////////////////////\n  // Typedefs for registers //\n  ////////////////////////////\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_intr_state_reg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_intr_enable_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_intr_test_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_alert_test_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n    } main_pd_n;\n    struct packed {\n      logic        q;\n    } usb_clk_en_active;\n    struct packed {\n      logic        q;\n    } usb_clk_en_lp;\n    struct packed {\n      logic        q;\n    } io_clk_en;\n    struct packed {\n      logic        q;\n    } core_clk_en;\n    struct packed {\n      logic        q;\n    } low_power_hint;\n  } pwrmgr_reg2hw_control_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_cfg_cdc_sync_reg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_wakeup_en_mreg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_reset_en_mreg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_wake_info_capture_dis_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n      logic        qe;\n    } abort;\n    struct packed {\n      logic        q;\n      logic        qe;\n    } fall_through;\n    struct packed {\n      logic [5:0]  q;\n      logic        qe;\n    } reasons;\n  } pwrmgr_reg2hw_wake_info_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n    } main_pd_glitch;\n    struct packed {\n      logic        q;\n    } esc_timeout;\n    struct packed {\n      logic        q;\n    } reg_intg_err;\n  } pwrmgr_reg2hw_fault_status_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_intr_state_reg_t;\n\n  typedef struct packed {\n    logic        d;\n  } pwrmgr_hw2reg_ctrl_cfg_regwen_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        d;\n      logic        de;\n    } low_power_hint;\n  } pwrmgr_hw2reg_control_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_cfg_cdc_sync_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_wake_status_mreg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_reset_status_mreg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_escalate_reset_status_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic [5:0]  d;\n    } reasons;\n    struct packed {\n      logic        d;\n    } fall_through;\n    struct packed {\n      logic        d;\n    } abort;\n  } pwrmgr_hw2reg_wake_info_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        d;\n      logic        de;\n    } reg_intg_err;\n    struct packed {\n      logic        d;\n      logic        de;\n    } esc_timeout;\n    struct packed {\n      logic        d;\n      logic        de;\n    } main_pd_glitch;\n  } pwrmgr_hw2reg_fault_status_reg_t;\n\n  // Register -> HW type\n  typedef struct packed {\n    pwrmgr_reg2hw_intr_state_reg_t intr_state; // [36:36]\n    pwrmgr_reg2hw_intr_enable_reg_t intr_enable; // [35:35]\n    pwrmgr_reg2hw_intr_test_reg_t intr_test; // [34:33]\n    pwrmgr_reg2hw_alert_test_reg_t alert_test; // [32:31]\n    pwrmgr_reg2hw_control_reg_t control; // [30:25]\n    pwrmgr_reg2hw_cfg_cdc_sync_reg_t cfg_cdc_sync; // [24:23]\n    pwrmgr_reg2hw_wakeup_en_mreg_t [5:0] wakeup_en; // [22:17]\n    pwrmgr_reg2hw_reset_en_mreg_t [1:0] reset_en; // [16:15]\n    pwrmgr_reg2hw_wake_info_capture_dis_reg_t wake_info_capture_dis; // [14:14]\n    pwrmgr_reg2hw_wake_info_reg_t wake_info; // [13:3]\n    pwrmgr_reg2hw_fault_status_reg_t fault_status; // [2:0]\n  } pwrmgr_reg2hw_t;\n\n  // HW -> register type\n  typedef struct packed {\n    pwrmgr_hw2reg_intr_state_reg_t intr_state; // [38:37]\n    pwrmgr_hw2reg_ctrl_cfg_regwen_reg_t ctrl_cfg_regwen; // [36:36]\n    pwrmgr_hw2reg_control_reg_t control; // [35:34]\n    pwrmgr_hw2reg_cfg_cdc_sync_reg_t cfg_cdc_sync; // [33:32]\n    pwrmgr_hw2reg_wake_status_mreg_t [5:0] wake_status; // [31:20]\n    pwrmgr_hw2reg_reset_status_mreg_t [1:0] reset_status; // [19:16]\n    pwrmgr_hw2reg_escalate_reset_status_reg_t escalate_reset_status; // [15:14]\n    pwrmgr_hw2reg_wake_info_reg_t wake_info; // [13:6]\n    pwrmgr_hw2reg_fault_status_reg_t fault_status; // [5:0]\n  } pwrmgr_hw2reg_t;\n\n  // Register offsets\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_STATE_OFFSET = 7'h 0;\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_ENABLE_OFFSET = 7'h 4;\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_TEST_OFFSET = 7'h 8;\n  localparam logic [BlockAw-1:0] PWRMGR_ALERT_TEST_OFFSET = 7'h c;\n  localparam logic [BlockAw-1:0] PWRMGR_CTRL_CFG_REGWEN_OFFSET = 7'h 10;\n  localparam logic [BlockAw-1:0] PWRMGR_CONTROL_OFFSET = 7'h 14;\n  localparam logic [BlockAw-1:0] PWRMGR_CFG_CDC_SYNC_OFFSET = 7'h 18;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKEUP_EN_REGWEN_OFFSET = 7'h 1c;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKEUP_EN_OFFSET = 7'h 20;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_STATUS_OFFSET = 7'h 24;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_EN_REGWEN_OFFSET = 7'h 28;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_EN_OFFSET = 7'h 2c;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_STATUS_OFFSET = 7'h 30;\n  localparam logic [BlockAw-1:0] PWRMGR_ESCALATE_RESET_STATUS_OFFSET = 7'h 34;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_INFO_CAPTURE_DIS_OFFSET = 7'h 38;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_INFO_OFFSET = 7'h 3c;\n  localparam logic [BlockAw-1:0] PWRMGR_FAULT_STATUS_OFFSET = 7'h 40;\n\n  // Reset values for hwext registers and their fields\n  localparam logic [0:0] PWRMGR_INTR_TEST_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_INTR_TEST_WAKEUP_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_ALERT_TEST_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_CTRL_CFG_REGWEN_RESVAL = 1'h 1;\n  localparam logic [0:0] PWRMGR_CTRL_CFG_REGWEN_EN_RESVAL = 1'h 1;\n  localparam logic [7:0] PWRMGR_WAKE_INFO_RESVAL = 8'h 0;\n  localparam logic [5:0] PWRMGR_WAKE_INFO_REASONS_RESVAL = 6'h 0;\n  localparam logic [0:0] PWRMGR_WAKE_INFO_FALL_THROUGH_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_WAKE_INFO_ABORT_RESVAL = 1'h 0;\n\n  // Register index\n  typedef enum int {\n    PWRMGR_INTR_STATE,\n    PWRMGR_INTR_ENABLE,\n    PWRMGR_INTR_TEST,\n    PWRMGR_ALERT_TEST,\n    PWRMGR_CTRL_CFG_REGWEN,\n    PWRMGR_CONTROL,\n    PWRMGR_CFG_CDC_SYNC,\n    PWRMGR_WAKEUP_EN_REGWEN,\n    PWRMGR_WAKEUP_EN,\n    PWRMGR_WAKE_STATUS,\n    PWRMGR_RESET_EN_REGWEN,\n    PWRMGR_RESET_EN,\n    PWRMGR_RESET_STATUS,\n    PWRMGR_ESCALATE_RESET_STATUS,\n    PWRMGR_WAKE_INFO_CAPTURE_DIS,\n    PWRMGR_WAKE_INFO,\n    PWRMGR_FAULT_STATUS\n  } pwrmgr_id_e;\n\n  // Register width information to check illegal writes\n  localparam logic [3:0] PWRMGR_PERMIT [17] = '{\n    4'b 0001, // index[ 0] PWRMGR_INTR_STATE\n    4'b 0001, // index[ 1] PWRMGR_INTR_ENABLE\n    4'b 0001, // index[ 2] PWRMGR_INTR_TEST\n    4'b 0001, // index[ 3] PWRMGR_ALERT_TEST\n    4'b 0001, // index[ 4] PWRMGR_CTRL_CFG_REGWEN\n    4'b 0011, // index[ 5] PWRMGR_CONTROL\n    4'b 0001, // index[ 6] PWRMGR_CFG_CDC_SYNC\n    4'b 0001, // index[ 7] PWRMGR_WAKEUP_EN_REGWEN\n    4'b 0001, // index[ 8] PWRMGR_WAKEUP_EN\n    4'b 0001, // index[ 9] PWRMGR_WAKE_STATUS\n    4'b 0001, // index[10] PWRMGR_RESET_EN_REGWEN\n    4'b 0001, // index[11] PWRMGR_RESET_EN\n    4'b 0001, // index[12] PWRMGR_RESET_STATUS\n    4'b 0001, // index[13] PWRMGR_ESCALATE_RESET_STATUS\n    4'b 0001, // index[14] PWRMGR_WAKE_INFO_CAPTURE_DIS\n    4'b 0001, // index[15] PWRMGR_WAKE_INFO\n    4'b 0001  // index[16] PWRMGR_FAULT_STATUS\n  };\n\nendpackage\n\n\nTRACE:\n%Warning-SYMRSVDWORD: /tmp/tmpiwj_y5y9.v:93:7: Symbol matches C++ common word: 'abort'\n   93 |     } abort;\n      |       ^~~~~\n                      ... For warning description see https://verilator.org/warn/SYMRSVDWORD?v=5.034\n                      ... Use \"/* verilator lint_off SYMRSVDWORD */\" and lint_on around source to disable this message.\n%Warning-SYMRSVDWORD: /tmp/tmpiwj_y5y9.v:161:7: Symbol matches C++ common word: 'abort'\n  161 |     } abort;\n      |       ^~~~~\n%Error: Exiting due to 2 warning(s)\n        ... See the manual at https://verilator.org/verilator_doc.html for more assistance.\n\n\nPREVIOUS ATTEMPTS:\nAttempt 1: FAILED\nError: %Warning-SYMRSVDWORD: /tmp/tmpiwj_y5y9.v:93:7: Symbol matches C++ common word: 'abort'\n   93 |     } abort;\n      |       ^~~~~\n                      ... For warning description see https://verilator.org/warn/SYMRSVDWORD?v=5.034\n                      ... Use \"/* verilator lint_off SYMRSVDWORD */\" and lint_on around source to disable this message.\n%Warning-SYMRSVDWORD: /tmp/tmpiwj_y5y9.v:161:7: Symbol matches C++ common word: 'abort'\n  161 |     } abort;\n      |       ^~~~~\n%Error: Exiting due to 2 warning(s)\n        ... See the manual at https://verilator.org/verilator_doc.html for more assistance.\n\n\nThe above attempts failed. Please fix ALL the issues shown in the traces.\n", "response": "// Copyright lowRISC contributors (OpenTitan project).\n// Licensed under the Apache License, Version 2.0, see LICENSE for details.\n// SPDX-License-Identifier: Apache-2.0\n//\n// Register Package auto-generated by `reggen` containing data structure\n\npackage pwrmgr_reg_pkg;\n\n  // Param list is now properly encapsulated.\n  localparam int NumWkups = 6;\n  localparam int SYSRST_CTRL_AON_WKUP_REQ_IDX = 0;\n  localparam int ADC_CTRL_AON_WKUP_REQ_IDX = 1;\n  localparam int PINMUX_AON_PIN_WKUP_REQ_IDX = 2;\n  localparam int PINMUX_AON_USB_WKUP_REQ_IDX = 3;\n  localparam int AON_TIMER_AON_WKUP_REQ_IDX = 4;\n  localparam int SENSOR_CTRL_AON_WKUP_REQ_IDX = 5;\n  localparam int NumRstReqs = 2;\n  localparam int NumIntRstReqs = 2;\n  localparam int NumDebugRstReqs = 1;\n  localparam int NumRomInputs = 1;\n  localparam int ResetMainPwrIdx = 2;\n  localparam int ResetEscIdx = 3;\n  localparam int ResetNdmIdx = 4;\n  localparam int NumAlerts = 1;\n\n  // Address widths within the block\n  localparam int BlockAw = 7;\n\n  ////////////////////////////\n  // Typedefs for registers //\n  ////////////////////////////\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_intr_state_reg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_intr_enable_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_intr_test_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_alert_test_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n    } main_pd_n;\n    struct packed {\n      logic        q;\n    } usb_clk_en_active;\n    struct packed {\n      logic        q;\n    } usb_clk_en_lp;\n    struct packed {\n      logic        q;\n    } io_clk_en;\n    struct packed {\n      logic        q;\n    } core_clk_en;\n    struct packed {\n      logic        q;\n    } low_power_hint;\n  } pwrmgr_reg2hw_control_reg_t;\n\n  typedef struct packed {\n    logic        q;\n    logic        qe;\n  } pwrmgr_reg2hw_cfg_cdc_sync_reg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_wakeup_en_mreg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_reset_en_mreg_t;\n\n  typedef struct packed {\n    logic        q;\n  } pwrmgr_reg2hw_wake_info_capture_dis_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n      logic        qe;\n    } abort_reg;\n    struct packed {\n      logic        q;\n      logic        qe;\n    } fall_through;\n    struct packed {\n      logic [5:0]  q;\n      logic        qe;\n    } reasons;\n  } pwrmgr_reg2hw_wake_info_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        q;\n    } main_pd_glitch;\n    struct packed {\n      logic        q;\n    } esc_timeout;\n    struct packed {\n      logic        q;\n    } reg_intg_err;\n  } pwrmgr_reg2hw_fault_status_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_intr_state_reg_t;\n\n  typedef struct packed {\n    logic        d;\n  } pwrmgr_hw2reg_ctrl_cfg_regwen_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        d;\n      logic        de;\n    } low_power_hint;\n  } pwrmgr_hw2reg_control_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_cfg_cdc_sync_reg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_wake_status_mreg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_reset_status_mreg_t;\n\n  typedef struct packed {\n    logic        d;\n    logic        de;\n  } pwrmgr_hw2reg_escalate_reset_status_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic [5:0]  d;\n    } reasons;\n    struct packed {\n      logic        d;\n    } fall_through;\n    struct packed {\n      logic        d;\n    } abort_reg;\n  } pwrmgr_hw2reg_wake_info_reg_t;\n\n  typedef struct packed {\n    struct packed {\n      logic        d;\n      logic        de;\n    } reg_intg_err;\n    struct packed {\n      logic        d;\n      logic        de;\n    } esc_timeout;\n    struct packed {\n      logic        d;\n      logic        de;\n    } main_pd_glitch;\n  } pwrmgr_hw2reg_fault_status_reg_t;\n\n  // Register -> HW type\n  typedef struct packed {\n    pwrmgr_reg2hw_intr_state_reg_t intr_state; // [36:36]\n    pwrmgr_reg2hw_intr_enable_reg_t intr_enable; // [35:35]\n    pwrmgr_reg2hw_intr_test_reg_t intr_test; // [34:33]\n    pwrmgr_reg2hw_alert_test_reg_t alert_test; // [32:31]\n    pwrmgr_reg2hw_control_reg_t control; // [30:25]\n    pwrmgr_reg2hw_cfg_cdc_sync_reg_t cfg_cdc_sync; // [24:23]\n    pwrmgr_reg2hw_wakeup_en_mreg_t [5:0] wakeup_en; // [22:17]\n    pwrmgr_reg2hw_reset_en_mreg_t [1:0] reset_en; // [16:15]\n    pwrmgr_reg2hw_wake_info_capture_dis_reg_t wake_info_capture_dis; // [14:14]\n    pwrmgr_reg2hw_wake_info_reg_t wake_info; // [13:3]\n    pwrmgr_reg2hw_fault_status_reg_t fault_status; // [2:0]\n  } pwrmgr_reg2hw_t;\n\n  // HW -> register type\n  typedef struct packed {\n    pwrmgr_hw2reg_intr_state_reg_t intr_state; // [38:37]\n    pwrmgr_hw2reg_ctrl_cfg_regwen_reg_t ctrl_cfg_regwen; // [36:36]\n    pwrmgr_hw2reg_control_reg_t control; // [35:34]\n    pwrmgr_hw2reg_cfg_cdc_sync_reg_t cfg_cdc_sync; // [33:32]\n    pwrmgr_hw2reg_wake_status_mreg_t [5:0] wake_status; // [31:20]\n    pwrmgr_hw2reg_reset_status_mreg_t [1:0] reset_status; // [19:16]\n    pwrmgr_hw2reg_escalate_reset_status_reg_t escalate_reset_status; // [15:14]\n    pwrmgr_hw2reg_wake_info_reg_t wake_info; // [13:6]\n    pwrmgr_hw2reg_fault_status_reg_t fault_status; // [5:0]\n  } pwrmgr_hw2reg_t;\n\n  // Register offsets\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_STATE_OFFSET = 7'h 0;\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_ENABLE_OFFSET = 7'h 4;\n  localparam logic [BlockAw-1:0] PWRMGR_INTR_TEST_OFFSET = 7'h 8;\n  localparam logic [BlockAw-1:0] PWRMGR_ALERT_TEST_OFFSET = 7'h c;\n  localparam logic [BlockAw-1:0] PWRMGR_CTRL_CFG_REGWEN_OFFSET = 7'h 10;\n  localparam logic [BlockAw-1:0] PWRMGR_CONTROL_OFFSET = 7'h 14;\n  localparam logic [BlockAw-1:0] PWRMGR_CFG_CDC_SYNC_OFFSET = 7'h 18;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKEUP_EN_REGWEN_OFFSET = 7'h 1c;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKEUP_EN_OFFSET = 7'h 20;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_STATUS_OFFSET = 7'h 24;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_EN_REGWEN_OFFSET = 7'h 28;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_EN_OFFSET = 7'h 2c;\n  localparam logic [BlockAw-1:0] PWRMGR_RESET_STATUS_OFFSET = 7'h 30;\n  localparam logic [BlockAw-1:0] PWRMGR_ESCALATE_RESET_STATUS_OFFSET = 7'h 34;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_INFO_CAPTURE_DIS_OFFSET = 7'h 38;\n  localparam logic [BlockAw-1:0] PWRMGR_WAKE_INFO_OFFSET = 7'h 3c;\n  localparam logic [BlockAw-1:0] PWRMGR_FAULT_STATUS_OFFSET = 7'h 40;\n\n  // Reset values for hwext registers and their fields\n  localparam logic [0:0] PWRMGR_INTR_TEST_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_INTR_TEST_WAKEUP_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_ALERT_TEST_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_CTRL_CFG_REGWEN_RESVAL = 1'h 1;\n  localparam logic [0:0] PWRMGR_CTRL_CFG_REGWEN_EN_RESVAL = 1'h 1;\n  localparam logic [7:0] PWRMGR_WAKE_INFO_RESVAL = 8'h 0;\n  localparam logic [5:0] PWRMGR_WAKE_INFO_REASONS_RESVAL = 6'h 0;\n  localparam logic [0:0] PWRMGR_WAKE_INFO_FALL_THROUGH_RESVAL = 1'h 0;\n  localparam logic [0:0] PWRMGR_WAKE_INFO_ABORT_RESVAL = 1'h 0;\n\n  // Register index\n  typedef enum int {\n    PWRMGR_INTR_STATE,\n    PWRMGR_INTR_ENABLE,\n    PWRMGR_INTR_TEST,\n    PWRMGR_ALERT_TEST,\n    PWRMGR_CTRL_CFG_REGWEN,\n    PWRMGR_CONTROL,\n    PWRMGR_CFG_CDC_SYNC,\n    PWRMGR_WAKEUP_EN_REGWEN,\n    PWRMGR_WAKEUP_EN,\n    PWRMGR_WAKE_STATUS,\n    PWRMGR_RESET_EN_REGWEN,\n    PWRMGR_RESET_EN,\n    PWRMGR_RESET_STATUS,\n    PWRMGR_ESCALATE_RESET_STATUS,\n    PWRMGR_WAKE_INFO_CAPTURE_DIS,\n    PWRMGR_WAKE_INFO,\n    PWRMGR_FAULT_STATUS\n  } pwrmgr_id_e;\n\n  // Register width information to check illegal writes\n  localparam logic [3:0] PWRMGR_PERMIT [17] = '{\n    4'b 0001, // index[ 0] PWRMGR_INTR_STATE\n    4'b 0001, // index[ 1] PWRMGR_INTR_ENABLE\n    4'b 0001, // index[ 2] PWRMGR_INTR_TEST\n    4'b 0001, // index[ 3] PWRMGR_ALERT_TEST\n    4'b 0001, // index[ 4] PWRMGR_CTRL_CFG_REGWEN\n    4'b 0011, // index[ 5] PWRMGR_CONTROL\n    4'b 0001, // index[ 6] PWRMGR_CFG_CDC_SYNC\n    4'b 0001, // index[ 7] PWRMGR_WAKEUP_EN_REGWEN\n    4'b 0001, // index[ 8] PWRMGR_WAKEUP_EN\n    4'b 0001, // index[ 9] PWRMGR_WAKE_STATUS\n    4'b 0001, // index[10] PWRMGR_RESET_EN_REGWEN\n    4'b 0001, // index[11] PWRMGR_RESET_EN\n    4'b 0001, // index[12] PWRMGR_RESET_STATUS\n    4'b 0001, // index[13] PWRMGR_ESCALATE_RESET_STATUS\n    4'b 0001, // index[14] PWRMGR_WAKE_INFO_CAPTURE_DIS\n    4'b 0001, // index[15] PWRMGR_WAKE_INFO\n    4'b 0001  // index[16] PWRMGR_FAULT_STATUS\n  };\n\nendpackage\n", "success": true, "stderr": "", "tool_used": true}
